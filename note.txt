##Tofic-01...................
JavaScript এ Array এর মধ্যে পিছন থেকে একটি সংখ্যা যোগ করার জন্য push(value) মেথড ব্যবহার করা হয় এবং একটি সংখ্যা সরানোর জন্য pop() মেথড ব্যবহার করা হয়।
এমনিভাবে সামনের দিক থেকে সংখ্যা সরানোর জন্য shift() মেথড ব্যবহার করা হয় এবং যোগ করার জন্য unshift(value)ব্যবহার করা হয়।

##Tofic-02..................
JavaScript-এর indexOf() মেথড ব্যবহার করে যখন কোনো উপাদান খোঁজা হয়, তখন এটি যে ইনডেক্সে উপাদানটি পাওয়া যায় তা রিটার্ন করে। তবে, যদি নির্দিষ্ট উপাদানটি অ্যারের মধ্যে না থাকে, তখন এটি -1 রিটার্ন করে।

কখন -1 রিটার্ন দেয়
যদি আপনি যে মানটি খুঁজছেন, তা অ্যারের মধ্যে উপস্থিত না থাকে, তাহলে indexOf() মেথড -1 রিটার্ন করে।

উদাহরণ ১: উপাদান নেই
let fruits = ['apple', 'banana', 'mango'];
let index = fruits.indexOf('orange'); // 'orange' নেই অ্যারেতে
console.log(index); // Output: -1

উদাহরণ ২: কেস সেনসিটিভিটির কারণে -1
indexOf() কেস-সেন্সিটিভ। অর্থাৎ, বড় অক্ষর ও ছোট অক্ষর আলাদা হিসাবে গণ্য করা হয়।

উদাহরণ ৩: আংশিক ম্যাচ -1
indexOf() শুধুমাত্র পুরোপুরি মিলে গেলে উপাদানের ইনডেক্স রিটার্ন করে। আংশিক মিলে গেলে এটি কাজ করে না।

উদাহরণ ৪: সংখ্যা বা ডেটা টাইপের কারণে
যদি উপাদানটি অ্যারেতে থাকে কিন্তু টাইপ ভিন্ন হয়, তাও indexOf() -1 রিটার্ন করবে।

উপসংহার
-1 রিটার্ন হয় যদি:
উপাদানটি অ্যারেতে উপস্থিত না থাকে।
কেস বা টাইপের পার্থক্য থাকে।
আংশিক মিলে যায় কিন্তু পুরোপুরি মেলে না।


##Tofic-03....................
JavaScript-এর indexOf() এবং includes() মেথড উভয়ই অ্যারেতে নির্দিষ্ট মান খুঁজতে ব্যবহৃত হয়। তবে এগুলোর মধ্যে কিছু পার্থক্য রয়েছে।

indexOf()
কাজের ধরন: অ্যারের মধ্যে নির্দিষ্ট মানের ইনডেক্স রিটার্ন করে। যদি মানটি না পাওয়া যায়, তাহলে -1 রিটার্ন করে।
উদ্দেশ্য: সাধারণত উপাদানের অবস্থান (ইনডেক্স) খুঁজে বের করার জন্য।
রিটার্ন ভ্যালু:
উপাদান থাকলে তার ইনডেক্স।
উপাদান না থাকলে -1।
কেস সেনসিটিভ: কেস-সেনসিটিভ।
ব্যবহার:
javascript
Copy code
let fruits = ['apple', 'banana', 'mango'];

// উপাদানের ইনডেক্স খোঁজা
console.log(fruits.indexOf('banana')); // Output: 1

// উপাদান না থাকলে
console.log(fruits.indexOf('orange')); // Output: -1
includes()
কাজের ধরন: অ্যারের মধ্যে নির্দিষ্ট মানটি আছে কি না তা চেক করে। এটি true বা false রিটার্ন করে।
উদ্দেশ্য: কেবল উপাদানটির উপস্থিতি যাচাই করার জন্য।
রিটার্ন ভ্যালু:
উপাদান থাকলে true।
উপাদান না থাকলে false।
কেস সেনসিটিভ: কেস-সেনসিটিভ।
ব্যবহার:
javascript
Copy code
let fruits = ['apple', 'banana', 'mango'];

// উপাদান আছে কি না চেক করা
console.log(fruits.includes('banana')); // Output: true

// উপাদান না থাকলে
console.log(fruits.includes('orange')); // Output: false
মূল পার্থক্য
পার্থক্য	indexOf()	includes()
ফলাফল	ইনডেক্স রিটার্ন করে বা -1 দেয়।	true বা false রিটার্ন করে।
উপযুক্ততা	উপাদানের অবস্থান বের করতে।	উপাদান আছে কি না তা যাচাই করতে।
জটিলতা	যদি শুধু উপস্থিতি যাচাই করতে চান, একটু বেশি কোড দরকার।	সরাসরি উপস্থিতি চেক করা সহজ।
ব্যবহারিক উদাহরণ	উপাদান কোথায় আছে তা জানতে।	উপাদানটি আছে কি না তা জানতে।
কখন কোনটি ব্যবহার করবেন?
indexOf():

যখন আপনি উপাদানের ইনডেক্স জানতে চান।
উদাহরণ:
javascript
Copy code
let fruits = ['apple', 'banana', 'mango'];
if (fruits.indexOf('banana') !== -1) {
    console.log('banana found at position', fruits.indexOf('banana'));
}
includes():

যখন আপনি শুধুমাত্র উপাদানটি অ্যারেতে আছে কি না তা যাচাই করতে চান।
উদাহরণ:
javascript
Copy code
let fruits = ['apple', 'banana', 'mango'];
if (fruits.includes('banana')) {
    console.log('banana is present in the array');
}
সংক্ষেপে:

indexOf(): ইনডেক্স দরকার হলে।
includes(): শুধু উপস্থিতি যাচাই করতে।


##Tofic-04...................
লুপ সহজ করতে কিছু টিপস
ছোট উদাহরণ দিয়ে প্র্যাকটিস করো।
মনে রাখো:
for: নির্দিষ্ট সংখ্যক কাজ।
while: শর্তের ওপর ভিত্তি করে।
do...while: অন্তত একবার কাজ করাতে হবে।